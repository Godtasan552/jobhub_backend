import { Request, Response, NextFunction } from 'express';
import { responseHelper } from '@/utils/responseHelper';

export class AppError extends Error {
  // ‡∏™‡∏£‡πâ‡∏≤‡∏á custom error class ‡∏Ç‡∏≠‡∏á‡πÄ‡∏£‡∏≤‡πÄ‡∏≠‡∏á
  statusCode: number;  // ‡∏£‡∏´‡∏±‡∏™‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ HTTP
  isOperational: boolean; // ‡πÉ‡∏ä‡πâ‡∏ö‡∏≠‡∏Å‡∏ß‡πà‡∏≤ error ‡∏ô‡∏µ‡πâ‡πÄ‡∏õ‡πá‡∏ô predictable ‡∏´‡∏£‡∏∑‡∏≠ unexpected
  data?: any; // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö error

  constructor(message: string, statusCode: number = 500, data?: any) {
    // ‡∏£‡∏±‡∏ö message, statusCode, ‡πÅ‡∏•‡∏∞ data
    super(message); // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å constructor ‡∏Ç‡∏≠‡∏á Error
    this.statusCode = statusCode; // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î statusCode
    this.isOperational = true; // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô operational error
    this.data = data; // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î data ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°

    Error.captureStackTrace(this, this.constructor);
    // ‡πÄ‡∏Å‡πá‡∏ö stack trace ‡∏Ç‡∏≠‡∏á error
  }
}

/**
 * Global error handler middleware
 * middleware ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ error ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô‡πÅ‡∏≠‡∏õ
 */
export const globalErrorHandler = (
  error: any,
  req: Request,
  res: Response,
  _next: NextFunction
): void => {
  let err = { ...error }; // clone error object
  err.message = error.message; // ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° error
  err.stack = error.stack; // ‡πÄ‡∏Å‡πá‡∏ö stack trace

  // Log error ‡∏•‡∏á console
  console.error('Error:', {
    message: err.message,
    stack: process.env.NODE_ENV === 'development' ? err.stack : undefined,
    url: req.originalUrl, // URL ‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏¥‡∏î error
    method: req.method, // HTTP method
    ip: req.ip, // IP ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
    userAgent: req.get('User-Agent'), // user agent
    timestamp: new Date().toISOString() // ‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏¥‡∏î error
  });

  // ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ Mongoose validation error
  if (err.name === 'ValidationError') {
    const message = 'Validation Error'; // ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° error
    const errors = Object.values(err.errors).map((val: any) => ({
      field: val.path, // field ‡∏ó‡∏µ‡πà‡∏ú‡∏¥‡∏î
      message: val.message, // ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° error
      value: val.value // ‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡∏°‡∏≤
    }));
    err = new AppError(message, 400, { errors }); // ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô AppError
  }

  // ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ Mongoose duplicate key error
  if (err.code === 11000) {
    const field = Object.keys(err.keyValue)[0]; // field ‡∏ó‡∏µ‡πà‡∏ã‡πâ‡∏≥
    const value = err.keyValue[field]; // ‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏ã‡πâ‡∏≥
    const message = `${field.charAt(0).toUpperCase() + field.slice(1)} '${value}' already exists`;
    err = new AppError(message, 409); // ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô AppError
  }

  // ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ Mongoose cast error (‡πÄ‡∏ä‡πà‡∏ô ObjectId ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á)
  if (err.name === 'CastError') {
    const message = `Invalid ${err.path}: ${err.value}`;
    err = new AppError(message, 400);
  }

  // ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ JWT errors
  if (err.name === 'JsonWebTokenError') {
    const message = 'Invalid token';
    err = new AppError(message, 401);
  }

  if (err.name === 'TokenExpiredError') {
    const message = 'Token expired';
    err = new AppError(message, 401);
  }

  // ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ Multer errors (‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö file upload)
  if (err.code === 'LIMIT_FILE_SIZE') {
    const message = 'File too large';
    err = new AppError(message, 413);
  }

  if (err.code === 'LIMIT_FILE_COUNT') {
    const message = 'Too many files';
    err = new AppError(message, 413);
  }

  if (err.code === 'LIMIT_UNEXPECTED_FILE') {
    const message = 'Unexpected file field';
    err = new AppError(message, 400);
  }

  // ‡∏™‡πà‡∏á error response
  if (err.isOperational || err instanceof AppError) {
    // ‡∏Å‡∏£‡∏ì‡∏µ predictable error
    responseHelper.error(
      res,
      err.message, // ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° error
      err.statusCode || 500, // statusCode
      process.env.NODE_ENV === 'development' ? {
        error: err,
        stack: err.stack,
        data: err.data
      } : err.data
    );
  } else {
    // ‡∏Å‡∏£‡∏ì‡∏µ programming error ‡∏´‡∏£‡∏∑‡∏≠ unknown error
    responseHelper.error(
      res,
      process.env.NODE_ENV === 'production' ? 'Something went wrong' : err.message,
      500,
      process.env.NODE_ENV === 'development' ? {
        error: err,
        stack: err.stack
      } : undefined
    );
  }
};

/**
 * Catch async errors wrapper
 * wrapper ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏±‡∏ö error ‡∏Ç‡∏≠‡∏á async function
 */
export const catchAsync = (fn: Function) => {
  return (req: Request, res: Response, next: NextFunction) => {
    Promise.resolve(fn(req, res, next)).catch(next);
    // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏Å‡∏¥‡∏î error ‡∏à‡∏∞‡∏™‡πà‡∏á‡∏ï‡πà‡∏≠‡πÑ‡∏õ globalErrorHandler
  };
};

/**
 * Handle 404 errors
 * middleware ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ route ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏û‡∏ö
 */
export const notFound = (req: Request, _res: Response, next: NextFunction): void => {
  const error = new AppError(`Route ${req.originalUrl} not found`, 404);
  next(error); // ‡∏™‡πà‡∏á error ‡∏ï‡πà‡∏≠‡πÑ‡∏õ‡πÉ‡∏´‡πâ globalErrorHandler
};

/**
 * Handle uncaught exceptions
 * ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ uncaught exceptions ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ñ‡∏π‡∏Å‡∏à‡∏±‡∏ö
 */
export const handleUncaughtException = (): void => {
  process.on('uncaughtException', (err: Error) => {
    console.error('UNCAUGHT EXCEPTION! üí• Shutting down...');
    console.error(err.name, err.message, err.stack); // log ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• error
    process.exit(1); // ‡∏õ‡∏¥‡∏î process
  });
};

/**
 * Handle unhandled promise rejections
 * ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ unhandled promise rejections
 */
export const handleUnhandledRejection = (): void => {
  process.on('unhandledRejection', (err: Error) => {
    console.error('UNHANDLED REJECTION! üí• Shutting down...');
    console.error(err.name, err.message); // log error
    process.exit(1); // ‡∏õ‡∏¥‡∏î process
  });
};

/**
 * Graceful shutdown handler
 * ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏õ‡∏¥‡∏î server ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏£‡∏±‡∏ö signal
 */
export const setupGracefulShutdown = (server: any): void => {
  const gracefulShutdown = (signal: string) => {
    console.log(`${signal} received. Shutting down gracefully...`);
    
    server.close(() => {
      console.log('üí• Process terminated!');
      process.exit(0); // ‡∏õ‡∏¥‡∏î process ‡∏´‡∏•‡∏±‡∏á‡∏õ‡∏¥‡∏î server ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢
    });

    // Force close ‡∏´‡∏•‡∏±‡∏á 30 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
    setTimeout(() => {
      console.error('Could not close connections in time, forcefully shutting down');
      process.exit(1);
    }, 30000);
  };

  process.on('SIGTERM', () => gracefulShutdown('SIGTERM'));
  process.on('SIGINT', () => gracefulShutdown('SIGINT'));
  // ‡∏£‡∏≠‡∏£‡∏±‡∏ö signal ‡∏à‡∏≤‡∏Å OS ‡πÅ‡∏•‡∏∞‡πÄ‡∏£‡∏µ‡∏¢‡∏Å shutdown
};
